<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Mar 2025 17:10:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cs144-lab7</title>
      <link>http://localhost:1313/posts/cs144/lab7/</link>
      <pubDate>Sun, 30 Mar 2025 17:10:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab7/</guid>
      <description>&lt;h2 id=&#34;object&#34;&gt;Object&lt;/h2&gt;
&lt;p&gt;The lab7 is the final lab of the cs144 network class, it doesn&amp;rsquo;t need a single line of code to write. But the idea of this whole structure is really nice to follow, and I will do and analyse these structures later on, but today, i give you a short framework of the lab7 and achievements.&lt;/p&gt;
&lt;h3 id=&#34;outline&#34;&gt;outline&lt;/h3&gt;
&lt;p&gt;The picture of this doc is nice to illustrate, lab7 uses some code to glues the bottom layer and the details things. It provided us an illusion that we use our components of code to connect and send files.
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/cs144/images/lab7_structure.png&#34;&gt;
It use cs144.keithw.org as a relay to communicate one with another. Then the host and server are likely to connect without hardware bariiers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab6</title>
      <link>http://localhost:1313/posts/cs144/lab6/</link>
      <pubDate>Sun, 30 Mar 2025 16:25:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab6/</guid>
      <description>&lt;h2 id=&#34;router&#34;&gt;Router&lt;/h2&gt;
&lt;h3 id=&#34;introduction&#34;&gt;introduction&lt;/h3&gt;
&lt;p&gt;A router lies in IP layer of TCP/IP, when an ip-packet comes to the network interface, the router will route the ip-packet to another router (indirect) or another network(direct). But the router don&amp;rsquo;t route the ip-packet randomly, it follow the routing tables strictly. The routing table is just a mapping for dst-ip and network interface. The router has the ability to drop the message if the ttl of the ip-header equals zero or one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>6-new-delete-object-model-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/6_new_delete/</link>
      <pubDate>Sun, 30 Mar 2025 14:28:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/6_new_delete/</guid>
      <description>&lt;h2 id=&#34;operator-new-delete&#34;&gt;operator new/delete&lt;/h2&gt;
&lt;h3 id=&#34;introduction&#34;&gt;introduction&lt;/h3&gt;
&lt;p&gt;In the last sections, we&amp;rsquo;ve already talked about new and delete. new expression is divided three parts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allocate memory using operator new&lt;/li&gt;
&lt;li&gt;static_cast&lt;/li&gt;
&lt;li&gt;ctor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the delete expression is divided two parts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dtor&lt;/li&gt;
&lt;li&gt;operator delete to release memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, expression is not allowed to override, but operator new and operator delete are allowed to override inside class or outside class(global).&lt;/p&gt;
&lt;h3 id=&#34;override-operator-new-delete-new-delete&#34;&gt;override ::operator new/::delete/::new[]/::delete[]&lt;/h3&gt;
&lt;p&gt;here is an example to override the global operator new/delete function&lt;/p&gt;</description>
    </item>
    <item>
      <title>5-vptr-vbtl-object-model-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/5_object_model_virtual/</link>
      <pubDate>Sun, 30 Mar 2025 14:27:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/5_object_model_virtual/</guid>
      <description>&lt;h2 id=&#34;vptr-and-vtbl&#34;&gt;vptr and vtbl&lt;/h2&gt;
&lt;h3 id=&#34;outline&#34;&gt;outline&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s use an example to illustrate the c++ object model (aka vptr and vbtl).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; vfunc1();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vfunc2&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func1&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func2&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m_data1, m_data2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; A{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; vfunc1();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func2&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m_data3;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; B{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; vfunc1();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func1&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m_data1, m_data4;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we create an object, the sizeof the object is member data variable. But if the class has at least one virtual function it will add another variable called vptr in object.
In this example above, the inheritance of class and memory is shown below.
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/c_plus_plus/images/5_vptr_vbtl.png&#34;&gt;
In each class B and class C, all override the virtual function 1, so each one is really different in memory. But B and C inherit from A, so all objects of B and C have vbtl entry pointing to A::func2. The picture shown above is really clear to see that.
The vptr in another side means that inheritance not only inherits data but also inherits access of function calls.&lt;/p&gt;</description>
    </item>
    <item>
      <title>4-syntactic-sugar-object-model-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/4_syntactic_sugar/</link>
      <pubDate>Sun, 30 Mar 2025 14:26:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/4_syntactic_sugar/</guid>
      <description>&lt;h2 id=&#34;auto--since-c-plus-plus-11&#34;&gt;auto (since c++ 11)&lt;/h2&gt;
&lt;p&gt;Using this keyword in c++ since c11, the compiler can deduce in the compilling time. If the typename is too long to write you can use it and let compiler to deduce.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;iterator ite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(c.begin(), c.end(), target);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; ite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(c.begin(), c.end(), target);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;range-base-for--since-c-plus-plus-11&#34;&gt;range-base for( since c++11)&lt;/h2&gt;
&lt;p&gt;In normal c++, we can use for-loop of type iterator or container.size to iterate the container. In c++11, it provides us a new for-loop.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3-template-object-model-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/3_template/</link>
      <pubDate>Sun, 30 Mar 2025 14:05:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/3_template/</guid>
      <description>&lt;h2 id=&#34;template&#34;&gt;Template&lt;/h2&gt;
&lt;p&gt;The template will be compiled successfully, but when called by user, it will be compiled again which might cause error. And the most important thing is operator overload function.&lt;/p&gt;
&lt;h3 id=&#34;template-class&#34;&gt;template class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  T re, ra;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; c1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; c1;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the compiler sees the Complex&amp;lt;int&amp;gt; or Complex&amp;lt;double&amp;gt; it will generate two slices of Complex has different type. This is kind of wasteful of memory but it&amp;rsquo;s necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2-special-class-object-model-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/2_special_classes/</link>
      <pubDate>Sun, 30 Mar 2025 13:55:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/2_special_classes/</guid>
      <description>&lt;h2 id=&#34;pointer-like-classes&#34;&gt;pointer-like classes&lt;/h2&gt;
&lt;p&gt;we say pointer like classes are smart pointers.
overload operator* and operator-&amp;gt; function&lt;/p&gt;
&lt;h3 id=&#34;simple-in-class&#34;&gt;simple in class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shared_ptr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;px; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   T&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; px; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   shared_ptr(T&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; px(p) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   T&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; px;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pn;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//usage example
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; method(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) { ... }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; sp(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Foo &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;method();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;px&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;method();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I am gonna to clarify that &lt;strong&gt;sp-&amp;gt;method&lt;/strong&gt;, the sp-&amp;gt; will call the operator-&amp;gt; function, it will return the px pointer but why it will call method function. Note: remember that -&amp;gt; will never disappear when called the operator-&amp;gt; function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1-explicit-typefunction-object-model-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/1_explicit_typefunction/</link>
      <pubDate>Sun, 30 Mar 2025 13:44:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/1_explicit_typefunction/</guid>
      <description>&lt;h2 id=&#34;conversion-function&#34;&gt;conversion function&lt;/h2&gt;
&lt;p&gt;form: &lt;strong&gt;operator typename()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fraction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Fraction(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; den&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; m_numerator(num), m_denominator(den) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;double&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;) (m_numerator &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; m_denominator);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m_numerator; &lt;span style=&#34;color:#75715e&#34;&gt;//fenzi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m_denominator;&lt;span style=&#34;color:#75715e&#34;&gt;// fenmu
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fraction &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The conversion function is aimed to let compiler know. When the compiler tries to compile the line double d = 4 + f; it will see if operator + (double, Fraction) is defined, or whether f is able to convert to double.
Finally, the compiler will try the latter one, convert f to double use the operator double() function in Fraction.
Actually you can write many conversion function as long as they are meaningful to the user.&lt;/p&gt;</description>
    </item>
    <item>
      <title>8-virtual-polymorphism-basic-object-oriented-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/8_virtual_polymorphism/</link>
      <pubDate>Sun, 30 Mar 2025 11:58:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/8_virtual_polymorphism/</guid>
      <description>&lt;h2 id=&#34;inheritance-with-virtual-function&#34;&gt;inheritance with virtual function&lt;/h2&gt;
&lt;h3 id=&#34;virtual-function&#34;&gt;virtual function&lt;/h3&gt;
&lt;p&gt;The inheritance with virtual function can make the most of it.
The member function has three forms classified by &lt;strong&gt;virtual&lt;/strong&gt;. And the virtual function needs to be &lt;strong&gt;overriden&lt;/strong&gt; by derived class.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;non-virtual function (with no virtual identifier)&lt;/li&gt;
&lt;li&gt;impure virtual function (with virtual identifier and default definition)&lt;/li&gt;
&lt;li&gt;pure virtual (with virtual identifier, = 0)  // fixme&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes we need a default virtual function definition so impure is necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>7-oop-ood-object-oriented-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/7_oop_ood/</link>
      <pubDate>Sun, 30 Mar 2025 11:48:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/7_oop_ood/</guid>
      <description>&lt;h2 id=&#34;oop-and-ood&#34;&gt;OOP and OOD&lt;/h2&gt;
&lt;p&gt;object oriented programming, object oriented design
We have three tools to design a good program, inheritance, composition, and delegation.&lt;/p&gt;
&lt;h3 id=&#34;inheritance&#34;&gt;Inheritance&lt;/h3&gt;
&lt;h4 id=&#34;is-a&#34;&gt;&lt;strong&gt;is-a&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The public inheritance way is &amp;ldquo;is-a&amp;rdquo;, like person is a creature. dog is a animal. etc.&lt;/p&gt;
&lt;h4 id=&#34;outline&#34;&gt;outline&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/c_plus_plus/images/7_inheritance.png&#34;&gt;
The same outline as composition.&lt;/p&gt;
&lt;h4 id=&#34;ctor-and-dtor&#34;&gt;ctor and dtor&lt;/h4&gt;
&lt;p&gt;The order of calling ctor when construct the class is from inner to outter, the dtor is the opposite.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Derived&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Derived(...) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Base() {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Derived&lt;span style=&#34;color:#f92672&#34;&gt;::~&lt;/span&gt;Derived(...) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {... &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Base();};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Besides, the compiler will automatically add the ctor and dtor, if ctor does ease your tastes then you need to change you like.
Note: the base dtor must using &lt;strong&gt;virtual&lt;/strong&gt; identifier, otherwise it will cause undefined behavior.&lt;/p&gt;</description>
    </item>
    <item>
      <title>6-complement-objcet-oriented-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/6_complement/</link>
      <pubDate>Sun, 30 Mar 2025 11:41:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/6_complement/</guid>
      <description>&lt;h2 id=&#34;static&#34;&gt;static&lt;/h2&gt;
&lt;h3 id=&#34;static-member-data&#34;&gt;static member data&lt;/h3&gt;
&lt;p&gt;only has one slice in memory, and need to be definition.&lt;/p&gt;
&lt;h3 id=&#34;static-member-function&#34;&gt;static member function&lt;/h3&gt;
&lt;p&gt;The only way to access static member data is using static member function.Besides, there is no &lt;strong&gt;this&lt;/strong&gt; pointer in static member function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex c1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex &lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.real();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.imag();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; pointer.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Complex&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;real(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;c1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Complex&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;imag(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;c2);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The member function only has one slice, it needs different address of object to access data.
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/c_plus_plus/images/6_static_object.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Example using static:&lt;/p&gt;</description>
    </item>
    <item>
      <title>5-new-delete-basic-object-oriented-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/5_new_delete/</link>
      <pubDate>Sun, 30 Mar 2025 11:28:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/5_new_delete/</guid>
      <description>&lt;h2 id=&#34;stack-and-heap&#34;&gt;stack and heap&lt;/h2&gt;
&lt;p&gt;stack memory is used for local object, local var, argument passed, return val.
heap memory is dynamically allocated using new, this memory is managed by OS.&lt;/p&gt;
&lt;h3 id=&#34;life-span&#34;&gt;life span&lt;/h3&gt;
&lt;h4 id=&#34;heap-object&#34;&gt;heap object&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  complex &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; complex(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;when the program goes out of the scope, the object pointed by p is still alive but we can&amp;rsquo;t access because the p is local var. In this case, it will cause memory leak , so we need to release when not use it anymore.&lt;/p&gt;</description>
    </item>
    <item>
      <title>4-big-three-object-oriented-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/4_big_three/</link>
      <pubDate>Sun, 30 Mar 2025 11:15:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/4_big_three/</guid>
      <description>&lt;h2 id=&#34;big-three&#34;&gt;Big three&lt;/h2&gt;
&lt;p&gt;why we need big there, and what conditions do we need big three?
The class contains pointer must include these three functions.
Note: if we don&amp;rsquo;t write copy ctor ,copy op= and dtor, the compiler will generate automatically.
For copy ctor it will copy bit by bit directly.
For dtor it will do nothing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy ctor&lt;/li&gt;
&lt;li&gt;copy op= (copy assignment function)&lt;/li&gt;
&lt;li&gt;dtor (destructor function)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String Class with pointer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3-operator-overload-object-oriented-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/3_operator_overload_typeobject/</link>
      <pubDate>Sun, 30 Mar 2025 11:06:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/3_operator_overload_typeobject/</guid>
      <description>&lt;h2 id=&#34;operator-overload&#34;&gt;operator overload&lt;/h2&gt;
&lt;h3 id=&#34;member-function&#34;&gt;member function&lt;/h3&gt;
&lt;p&gt;the member function overload contains this pointer implicitly, but you don&amp;rsquo;t have to pass the argument. you can use it freely.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__doapl(complex&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ths, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ths&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;re &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; r.re;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ths&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;im &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; r.im;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ths;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__doapl&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, r);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;complex &lt;span style=&#34;color:#a6e22e&#34;&gt;c1&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex &lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c3 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c1;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;why we need return by reference when we define &lt;strong&gt;+=&lt;/strong&gt; overload function? If you just use c2 += c1; you can define void return type, but when there is a consecutive assignment which means the expression must return a type that can be passed to another +=. So &lt;strong&gt;complex &amp;amp;&lt;/strong&gt; matters. &lt;strong&gt;c3 += c2 += c1&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>2-pass-return-object-oriented-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/2_pass_and_return/</link>
      <pubDate>Sun, 30 Mar 2025 10:48:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/2_pass_and_return/</guid>
      <description>&lt;h2 id=&#34;argument-pass&#34;&gt;argument pass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pass by value&lt;/li&gt;
&lt;li&gt;pass by reference (to const)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advice: all arguments passed by reference, if it&amp;rsquo;s not changed inside the function add &lt;strong&gt;const&lt;/strong&gt; identifier.
Besides, in reality, the reference is a pointer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  complex (&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; re(r), im(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;real&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; re;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;imag&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; im;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; re, im;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;friend&lt;/span&gt; complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; __doapl (complex&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (ostream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; complex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; real(x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; imag(x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;complex &lt;span style=&#34;color:#a6e22e&#34;&gt;c1&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex c2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;return-value&#34;&gt;return value&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;return value&lt;/li&gt;
&lt;li&gt;return reference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advice: all return value are set reference, if some cases happen that it&amp;rsquo;s not allowed to return reference then return value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1-basic-ctor-object-oriented-cpp</title>
      <link>http://localhost:1313/posts/c&#43;&#43;_basic/1_ctor/</link>
      <pubDate>Sun, 30 Mar 2025 10:09:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;_basic/1_ctor/</guid>
      <description>&lt;h2 id=&#34;c-plus-plus-profile&#34;&gt;C-plus-plus profile&lt;/h2&gt;
&lt;h3 id=&#34;object&#34;&gt;object&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;object based
-class without pointer members
-Complex
-class with pointer members
-String&lt;/li&gt;
&lt;li&gt;object oriented
-inheritance
-composition
-delegation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-and-functions&#34;&gt;data and functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C type[data] [functions]&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;gt;variable in memory&lt;/li&gt;
&lt;li&gt;C++ class/struct [data, functions]&amp;mdash;&amp;mdash;&amp;gt;object in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: the function of class only has one copy which means when you create class only data occupies memory and vptr (if has virtual function inside class).&lt;/p&gt;
&lt;h3 id=&#34;c-plus-plus-coding-program&#34;&gt;C-plus-plus coding program&lt;/h3&gt;
&lt;p&gt;.h/.cpp/.hpp never mind&lt;/p&gt;
&lt;h3 id=&#34;gurad-declaration&#34;&gt;gurad declaration&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#progam once
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef __COMPLEX__
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define __COMPLEX__
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;header-layout&#34;&gt;Header Layout&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;class-delcaration&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;class-definition&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;function ... ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;forward-declarations&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;template&#34;&gt;template&lt;/h3&gt;
&lt;p&gt;complex not only double real and image, maybe float or int&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab5</title>
      <link>http://localhost:1313/posts/cs144/lab5/</link>
      <pubDate>Wed, 26 Mar 2025 19:59:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab5/</guid>
      <description>&lt;h2 id=&#34;object&#34;&gt;Object&lt;/h2&gt;
&lt;p&gt;In this lab5, I am gonna to implent an IP interface for TCP/IP stack and IP router later in lab6. The IP interface is used to send etherframe using payload from IP layer. So, in this layer, we handle the mac etherframe in details. If we don&amp;rsquo;t konw the mac address of the next-hop IP address, we need to  send ARP request to this subnet, then queuing the datagram until the ARP message received. After receiving the ARP message, we need to doc the &amp;lt;next-hop, mac&amp;gt; pair mapping for 30 secs in this lab, with this mapping, the next time sending to the same ip would not send ARP message again.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab4</title>
      <link>http://localhost:1313/posts/cs144/lab4/</link>
      <pubDate>Sun, 23 Mar 2025 15:25:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab4/</guid>
      <description>&lt;h2 id=&#34;glue-of-cs144tcpsocket&#34;&gt;Glue of CS144TCPSocket&lt;/h2&gt;
&lt;p&gt;I will illustrate the glue for using CS144TCPSocket in one image.
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/cs144/images/lab4_cs144_framework.png&#34;&gt;
From the picture, we know that it&amp;rsquo;s our job to implement TCP/IP in user layer in this class. But how do our packets of network send to other computers through the internet ? The answer is to use tun/tap device under the linux kernel. The tun/tap device is kinda like a software net-card which tun device gives you raw IP packet and tap device gives you raw MAC dataframe. And follow the instructions of the tun.sh, setting the iptables to route makes our packet to go elsewhere.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab3</title>
      <link>http://localhost:1313/posts/cs144/lab3/</link>
      <pubDate>Sat, 22 Mar 2025 20:17:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab3/</guid>
      <description>&lt;h2 id=&#34;tcp-sender-class&#34;&gt;TCP Sender Class&lt;/h2&gt;
&lt;p&gt;TCP  Sender Responsibility,&lt;/p&gt;
&lt;p&gt;• Keep track of the receiver’s window (receiving incoming TCPReceiverMessages with
their acknos and window sizes)
• Fill the window when possible, by reading from the ByteStream, creating new TCP
segments (including SYN and FIN flags if needed), and sending them. The sender should
keep sending segments until either the window is full or the outbound ByteStream has
nothing more to send. &lt;strong&gt;while loop&lt;/strong&gt;
• Keep track of which segments have been sent but not yet acknowledged by the receiver—
we call these “outstanding” segments . &lt;strong&gt;outstanding segments&lt;/strong&gt;
• Re-send outstanding segments if enough time passes since they were sent, and they
haven’t been acknowledged yet. &lt;strong&gt;timer class design&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab2</title>
      <link>http://localhost:1313/posts/cs144/lab2/</link>
      <pubDate>Sat, 22 Mar 2025 20:11:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab2/</guid>
      <description>&lt;h2 id=&#34;outline-of-tcpreceiver&#34;&gt;Outline of TCPreceiver&lt;/h2&gt;
&lt;p&gt;From the lab0, and lab1 we have implemented the ByteStream and Reassembler, in this lab2, I am gonna implement TCPreceiver.&lt;/p&gt;
&lt;p&gt;First of all, we have to illustrate , in TCP (transmition control protocol), there may be many cases of the packets sent by the tcp peer of sender(versus the contrary). For example, there may be lost, altered, reordered, duplicated. And the TCP protocol was designed to handle these cases , so did I.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab1</title>
      <link>http://localhost:1313/posts/cs144/lab1/</link>
      <pubDate>Sat, 22 Mar 2025 19:59:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab1/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;h3 id=&#34;course-learn&#34;&gt;Course Learn&lt;/h3&gt;
&lt;p&gt;operations idempotency meaning:&lt;/p&gt;
&lt;p&gt;Idempotency is a property of certain operations or API requests that ensures performing the operation multiple times yields the same result as if it were executed only once. (GET PUT)
And the result we expect is &lt;strong&gt;result form&lt;/strong&gt; not &lt;strong&gt;result value&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A non-idempotent operation, on the other hand, changes the state with each execution, meaning that subsequent calls with the same input can yield different results. This is crucial to recognize because it can lead to unintended side effects when such operations are repeated. (POST)&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab0</title>
      <link>http://localhost:1313/posts/cs144/lab0/</link>
      <pubDate>Fri, 21 Mar 2025 15:58:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab0/</guid>
      <description>&lt;h2 id=&#34;1-set-up-linux-environment&#34;&gt;1 Set up Linux environment&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ubuntu 22.04&lt;/li&gt;
&lt;li&gt;g++ 11.4&lt;/li&gt;
&lt;li&gt;packages required&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $ sudo apt update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt install git cmake gdb build-essential clang &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;clang-tidy clang-format gcc-doc pkg-config glibc-doc tcpdump tshark
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-networking-by-hand&#34;&gt;2 Networking by hand&lt;/h2&gt;
&lt;p&gt;networking abstraction        &amp;mdash;reliable bidirectional byte stream&lt;/p&gt;
&lt;h3 id=&#34;2-dot-1-fetch-a-web-page&#34;&gt;2.1 Fetch a Web Page&lt;/h3&gt;
&lt;h4 id=&#34;steps&#34;&gt;steps&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cs144.keithw.org/hello&#34;&gt;web server address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;using telnet &lt;strong&gt;telnet cs144.keithw.org http&lt;/strong&gt; to open a reliable byte stream between two computers.&lt;/li&gt;
&lt;li&gt;First, Type &lt;strong&gt;GET /hello HTTP/1.1&lt;/strong&gt; `Enter` the Enter is very important&lt;/li&gt;
&lt;li&gt;Second, Type &lt;strong&gt;Host: cs144.keithw.org&lt;/strong&gt; `Enter`&lt;/li&gt;
&lt;li&gt;Third, Type &lt;strong&gt;Connection: close&lt;/strong&gt; `Enter``&lt;/li&gt;
&lt;li&gt;Finally, Type `Enter`&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;explanation&#34;&gt;explanation&lt;/h4&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;ndash; &lt;strong&gt;&lt;a href=&#34;http://host/path&#34;&gt;http://host/path&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
