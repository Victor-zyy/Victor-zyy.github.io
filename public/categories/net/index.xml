<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Net on My New Hugo Site</title>
    <link>http://localhost:1313/categories/net/</link>
    <description>Recent content in Net on My New Hugo Site</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Mar 2025 19:59:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cs144-lab5</title>
      <link>http://localhost:1313/posts/cs144/lab5/</link>
      <pubDate>Wed, 26 Mar 2025 19:59:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab5/</guid>
      <description>&lt;h2 id=&#34;object&#34;&gt;Object&lt;/h2&gt;
&lt;p&gt;In this lab5, I am gonna to implent an IP interface for TCP/IP stack and IP router later in lab6. The IP interface is used to send etherframe using payload from IP layer. So, in this layer, we handle the mac etherframe in details. If we don&amp;rsquo;t konw the mac address of the next-hop IP address, we need to  send ARP request to this subnet, then queuing the datagram until the ARP message received. After receiving the ARP message, we need to doc the &amp;lt;next-hop, mac&amp;gt; pair mapping for 30 secs in this lab, with this mapping, the next time sending to the same ip would not send ARP message again.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab4</title>
      <link>http://localhost:1313/posts/cs144/lab4/</link>
      <pubDate>Sun, 23 Mar 2025 15:25:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab4/</guid>
      <description>&lt;h2 id=&#34;glue-of-cs144tcpsocket&#34;&gt;Glue of CS144TCPSocket&lt;/h2&gt;
&lt;p&gt;I will illustrate the glue for using CS144TCPSocket in one image.
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/cs144/images/lab4_cs144_framework.png&#34;&gt;
From the picture, we know that it&amp;rsquo;s our job to implement TCP/IP in user layer in this class. But how do our packets of network send to other computers through the internet ? The answer is to use tun/tap device under the linux kernel. The tun/tap device is kinda like a software net-card which tun device gives you raw IP packet and tap device gives you raw MAC dataframe. And follow the instructions of the tun.sh, setting the iptables to route makes our packet to go elsewhere.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab3</title>
      <link>http://localhost:1313/posts/cs144/lab3/</link>
      <pubDate>Sat, 22 Mar 2025 20:17:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab3/</guid>
      <description>&lt;h2 id=&#34;tcp-sender-class&#34;&gt;TCP Sender Class&lt;/h2&gt;
&lt;p&gt;TCP  Sender Responsibility,&lt;/p&gt;
&lt;p&gt;• Keep track of the receiver’s window (receiving incoming TCPReceiverMessages with
their acknos and window sizes)
• Fill the window when possible, by reading from the ByteStream, creating new TCP
segments (including SYN and FIN flags if needed), and sending them. The sender should
keep sending segments until either the window is full or the outbound ByteStream has
nothing more to send. &lt;strong&gt;while loop&lt;/strong&gt;
• Keep track of which segments have been sent but not yet acknowledged by the receiver—
we call these “outstanding” segments . &lt;strong&gt;outstanding segments&lt;/strong&gt;
• Re-send outstanding segments if enough time passes since they were sent, and they
haven’t been acknowledged yet. &lt;strong&gt;timer class design&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab2</title>
      <link>http://localhost:1313/posts/cs144/lab2/</link>
      <pubDate>Sat, 22 Mar 2025 20:11:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab2/</guid>
      <description>&lt;h2 id=&#34;outline-of-tcpreceiver&#34;&gt;Outline of TCPreceiver&lt;/h2&gt;
&lt;p&gt;From the lab0, and lab1 we have implemented the ByteStream and Reassembler, in this lab2, I am gonna implement TCPreceiver.&lt;/p&gt;
&lt;p&gt;First of all, we have to illustrate , in TCP (transmition control protocol), there may be many cases of the packets sent by the tcp peer of sender(versus the contrary). For example, there may be lost, altered, reordered, duplicated. And the TCP protocol was designed to handle these cases , so did I.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab1</title>
      <link>http://localhost:1313/posts/cs144/lab1/</link>
      <pubDate>Sat, 22 Mar 2025 19:59:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab1/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;h3 id=&#34;course-learn&#34;&gt;Course Learn&lt;/h3&gt;
&lt;p&gt;operations idempotency meaning:&lt;/p&gt;
&lt;p&gt;Idempotency is a property of certain operations or API requests that ensures performing the operation multiple times yields the same result as if it were executed only once. (GET PUT)
And the result we expect is &lt;strong&gt;result form&lt;/strong&gt; not &lt;strong&gt;result value&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A non-idempotent operation, on the other hand, changes the state with each execution, meaning that subsequent calls with the same input can yield different results. This is crucial to recognize because it can lead to unintended side effects when such operations are repeated. (POST)&lt;/p&gt;</description>
    </item>
    <item>
      <title>cs144-lab0</title>
      <link>http://localhost:1313/posts/cs144/lab0/</link>
      <pubDate>Fri, 21 Mar 2025 15:58:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs144/lab0/</guid>
      <description>&lt;h2 id=&#34;1-set-up-linux-environment&#34;&gt;1 Set up Linux environment&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ubuntu 22.04&lt;/li&gt;
&lt;li&gt;g++ 11.4&lt;/li&gt;
&lt;li&gt;packages required&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $ sudo apt update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt install git cmake gdb build-essential clang &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;clang-tidy clang-format gcc-doc pkg-config glibc-doc tcpdump tshark
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-networking-by-hand&#34;&gt;2 Networking by hand&lt;/h2&gt;
&lt;p&gt;networking abstraction        &amp;mdash;reliable bidirectional byte stream&lt;/p&gt;
&lt;h3 id=&#34;2-dot-1-fetch-a-web-page&#34;&gt;2.1 Fetch a Web Page&lt;/h3&gt;
&lt;h4 id=&#34;steps&#34;&gt;steps&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cs144.keithw.org/hello&#34;&gt;web server address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;using telnet &lt;strong&gt;telnet cs144.keithw.org http&lt;/strong&gt; to open a reliable byte stream between two computers.&lt;/li&gt;
&lt;li&gt;First, Type &lt;strong&gt;GET /hello HTTP/1.1&lt;/strong&gt; `Enter` the Enter is very important&lt;/li&gt;
&lt;li&gt;Second, Type &lt;strong&gt;Host: cs144.keithw.org&lt;/strong&gt; `Enter`&lt;/li&gt;
&lt;li&gt;Third, Type &lt;strong&gt;Connection: close&lt;/strong&gt; `Enter``&lt;/li&gt;
&lt;li&gt;Finally, Type `Enter`&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;explanation&#34;&gt;explanation&lt;/h4&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;ndash; &lt;strong&gt;&lt;a href=&#34;http://host/path&#34;&gt;http://host/path&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
